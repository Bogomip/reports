{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map, mergeMap, take } from 'rxjs/operators';\nlet AdminUsersComponent = class AdminUsersComponent {\n  constructor(auth, firebase, fFunctions, console) {\n    this.auth = auth;\n    this.firebase = firebase;\n    this.fFunctions = fFunctions;\n    this.console = console;\n  }\n\n  ngOnInit() {\n    // subscribe to the user authentication information.  \n    this.auth.user.subscribe(user => {\n      this.user = user;\n    }); // call the user list...\n\n    this.listUsers();\n  }\n\n  listUsers() {\n    var users = [];\n    this.loading = true;\n    this.firebase.collection('users').get().pipe(take(1)).subscribe(userData => {\n      userData.docs.forEach(user => {\n        users.push({\n          name: user.data().name,\n          email: user.data().email,\n          admin: user.data().admin ? true : false,\n          manager: user.data().manager ? true : false\n        });\n      });\n      this.loading = false;\n      this.loadingMessage = undefined;\n      this.fullUserList = users;\n      this.userList = users;\n    }, error => {\n      this.loadingMessage = `Error loading userlist: ${error.message} Click to retry...`;\n      this.loading = false;\n    });\n  }\n  /**\r\n   * Updates the users list based upon a search\r\n   * Not perfect right now as the main query takes only 100 records but fine for now.\r\n   * @param input the text input the search name and email for.\r\n   */\n\n\n  updateUsersList(input) {\n    if (input.length > 1) {\n      const keywords = input.split(\" \");\n      this.userList = this.fullUserList.filter(user => {\n        let result = false;\n        keywords.forEach(word => {\n          if (word.length > 1 && (user.email.includes(word) || user.name.includes(word))) {\n            result = true;\n          }\n        });\n        return result;\n      });\n    } else {\n      this.userList = this.fullUserList;\n    }\n  }\n\n  modifyUserData(userEmail, key, value) {\n    const obs = this.firebase.collection('users', ref => ref.where('email', '==', userEmail)).get();\n    return obs.pipe(take(1), map(result => {\n      result.docs.forEach(doc => {\n        this.firebase.collection('users').doc(doc.id).update({\n          [key]: value\n        });\n        this.console.addToLog(`Modified database: ${userEmail} has key '${key}' set to '${value}'.`); // update the arrays...\n\n        this.modifyUserLists(userEmail, key, value);\n      });\n    }));\n  }\n\n  modifyUserLists(userEmail, key, value) {\n    // run through the arrays twice to find the value. Emails only appear once so this can be broken when found.\n    // maybe not perfect, but good enough for the small use case.\n    // the full user list\n    let fullUserList = this.fullUserList;\n    let userList = this.userList;\n\n    for (let i = 0; i < fullUserList.length; i++) {\n      if (fullUserList[i].email === userEmail) {\n        fullUserList[i][key] = value;\n        this.fullUserList = fullUserList;\n        break;\n      }\n    } // and the visible user list\n\n\n    for (let i = 0; i < userList.length; i++) {\n      if (userList[i].email === userEmail) {\n        userList[i][key] = value;\n        this.userList = userList;\n        break;\n      }\n    }\n  }\n  /**\r\n   * Modify the status of the admin - toggle function\r\n   *\r\n   * @param email the email of the user to change\r\n   * @param currentStatus true or false\r\n   * @param button the button clicked on the page\r\n   */\n\n\n  modifyAdminStatus(email, currentStatus, button) {\n    let obs;\n    button.target.innerHTML = \"Working...\"; // set the observable based upon the current status\n\n    if (currentStatus === true) {\n      obs = this.removeAdmin(email);\n    } else {\n      obs = this.addAdmin(email);\n    }\n\n    obs.subscribe(() => {\n      button.target.innerHTML = \"Admin\";\n    }, error => {\n      button.target.innerHTML = \"Admin\";\n      this.console.addToLog(`Failed to change the admin status of ${email} to ${!currentStatus}: ${error.message}`);\n    });\n  }\n  /**\r\n   * Modify the status of the admin - toggle function\r\n   *\r\n   * @param email the email of the user to change\r\n   * @param currentStatus true or false\r\n   * @param button the button clicked on the page\r\n   */\n\n\n  modifyManagerStatus(email, currentStatus, button) {\n    let obs;\n    button.target.innerHTML = \"Working...\"; // set the observable based upon the current status\n\n    if (currentStatus === true) {\n      obs = this.removeManager(email);\n    } else {\n      obs = this.addManager(email);\n    }\n\n    obs.subscribe(() => {\n      button.target.innerHTML = \"Manager\";\n    }, error => {\n      button.target.innerHTML = \"Manager\";\n      this.console.addToLog(`Failed to change the manager status of ${email} to ${!currentStatus}: ${error.message}`);\n    });\n  }\n\n  addAdmin(email) {\n    const addAdminRole = this.fFunctions.httpsCallable('addAdminRole'); // add the email to the admin list\n\n    return addAdminRole({\n      email: email\n    }).pipe(take(1), mergeMap(() => {\n      return this.modifyUserData(email, 'admin', true);\n    }));\n  }\n\n  removeAdmin(email) {\n    const removeAdminRole = this.fFunctions.httpsCallable('removeAdminRole'); // add the email to the admin list\n\n    return removeAdminRole({\n      email: email\n    }).pipe(take(1), mergeMap(() => {\n      return this.modifyUserData(email, 'admin', false);\n    }));\n  }\n\n  addManager(email) {\n    const addManagerRole = this.fFunctions.httpsCallable('addManagerRole'); // add the email to the manager list\n\n    return addManagerRole({\n      email: email\n    }).pipe(take(1), mergeMap(() => {\n      return this.modifyUserData(email, 'manager', true);\n    }));\n  }\n\n  removeManager(email) {\n    const removeManagerRole = this.fFunctions.httpsCallable('removeManagerRole'); // remove the email from the manager list\n\n    return removeManagerRole({\n      email: email\n    }).pipe(take(1), mergeMap(() => {\n      return this.modifyUserData(email, 'manager', false);\n    }));\n  }\n\n};\nAdminUsersComponent = __decorate([Component({\n  selector: 'app-admin-users',\n  templateUrl: './admin-users.component.html',\n  styleUrls: ['./admin-users.component.scss']\n})], AdminUsersComponent);\nexport { AdminUsersComponent };","map":null,"metadata":{},"sourceType":"module"}