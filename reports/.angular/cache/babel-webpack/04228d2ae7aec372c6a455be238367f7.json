{"ast":null,"code":"import { from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utilities/authentication/authentication.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(auth, http, firebase) {\n      this.auth = auth;\n      this.http = http;\n      this.firebase = firebase; // basic things to record basic data. To estimate firebase costs.\n\n      this.statWrite = 0;\n      this.statRead = 0; // subscribe to the user details;\n\n      auth.user.subscribe(user => {\n        this.user = user;\n      });\n    }\n\n    getWrites() {\n      return this.statWrite;\n    }\n\n    getReads() {\n      return this.statRead;\n    }\n\n    readOperation(reads = 1) {\n      this.statRead += reads;\n    }\n\n    writeOperation(writes = 1) {\n      this.statWrite += writes;\n    } // SENTENCES\n    // database connections with angular firestore\n    // name makes them explanatory - all return observables.\n\n\n    getSentences(docname) {\n      this.readOperation();\n      return this.firebase.collection('sentences').doc(docname).get();\n    }\n\n    uploadSentences(docname, data) {\n      this.writeOperation();\n      return from(this.firebase.collection('sentences').doc(docname).set(data));\n    } // USERNAME\n\n\n    getUserName(uid) {\n      this.readOperation();\n      return this.firebase.collection('users').doc(uid).get();\n    }\n\n    modifyUserData(userid, data) {\n      this.writeOperation();\n      return from(this.firebase.collection('users').doc(userid).update(data));\n    } // GROUPS\n\n    /**\r\n     * Get all the groups this user is a part of\r\n     * @returns Observable<QuerySnapshot<any>> to subscribe to...\r\n     */\n\n\n    getGroups() {\n      this.readOperation();\n      return this.firebase.collection('group', grp => grp.where('managers', 'array-contains', this.user.id)).get();\n    }\n\n    createGroup(data) {\n      this.writeOperation();\n      return from(this.firebase.collection('group').add(data));\n    }\n\n    modifyGroup(data, id) {\n      this.writeOperation();\n      return from(this.firebase.collection('group').doc(id).update(data));\n    }\n\n    deleteGroup(id) {\n      this.writeOperation();\n      return from(this.firebase.collection('group').doc(id).delete());\n    } // TEMPLATES\n\n\n    getTemplates() {\n      this.readOperation();\n      return this.firebase.collection('templates', template => template.where('manager', '==', this.user.id) || template.where('open', '==', true)).get();\n    }\n\n    getTemplate(id) {\n      this.readOperation();\n      return this.firebase.collection('templates').doc(id).get();\n    }\n\n    addTemplate(data) {\n      this.writeOperation();\n      return from(this.firebase.collection('templates').add(data));\n    }\n\n    updateTemplate(data, id) {\n      this.writeOperation();\n      return from(this.firebase.collection('templates').doc(id).update(data));\n    }\n\n    deleteTemplate(id) {\n      this.writeOperation();\n      return from(this.firebase.collection('templates').doc(id).delete());\n    } // REPORTS //\n\n\n    getReports() {\n      this.readOperation();\n      return this.firebase.collection('reports', report => report.where('manager', '==', this.user.id)).get();\n    }\n\n    getReport(id) {\n      this.readOperation();\n      return this.firebase.collection('reports').doc(id).get();\n    }\n\n    updateReport(data, id) {\n      this.writeOperation();\n      return from(this.firebase.collection('reports').doc(id).update(Object.assign(Object.assign({}, data), {\n        lastUpdated: Date.now()\n      })));\n    }\n\n    addNewReport(data) {\n      this.writeOperation();\n      return from(this.firebase.collection('reports').add(data));\n    }\n\n    deleteReport(id) {\n      this.writeOperation();\n      return from(this.firebase.collection('reports').doc(id).delete());\n    } // bug report stuff...\n\n\n    addBugReport(report) {\n      // add to the database...\n      this.writeOperation();\n      return from(this.firebase.collection('bugreports').add(report));\n    }\n\n    getAllBugReports() {\n      this.readOperation();\n      return this.firebase.collection('bugreports').get();\n    }\n\n    getIncompletedBugReports() {\n      this.readOperation();\n      return this.firebase.collection('bugreports', report => report.where('addressed', '==', false)).get();\n    }\n\n    updateBugReport(documentId, status) {\n      this.writeOperation();\n      return from(this.firebase.collection('bugreports').doc(documentId).update({\n        'addressed': status\n      }));\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}