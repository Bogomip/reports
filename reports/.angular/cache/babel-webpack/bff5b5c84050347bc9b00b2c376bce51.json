{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/router\";\n/**\r\n * NOTE TO SELF\r\n *\r\n * This works, but I am not happy with the flow, and needs to be more robust perhaps.\r\n */\n\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(firestore, fAuth, router) {\n      this.firestore = firestore;\n      this.fAuth = fAuth;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.keepAlive = true; //for testing = true, but needs to persist somehow... localstorage settings?\n      // password checking...\n\n      this.strong = new RegExp('(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])');\n      this.medium = new RegExp('(?=.{7,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])');\n      this.long = new RegExp('(?=.{10,})');\n      this.acceptable = new RegExp('(?=.{6,})');\n    }\n\n    ngOnInit() {\n      this.fAuth.onIdTokenChanged(state => {\n        console.log(`state change: `, state);\n      });\n      this.fAuth.onAuthStateChanged(state => {\n        console.log(state);\n      });\n    }\n    /**\r\n     *\r\n     * Sign up a new user to the system.\r\n     * @param email\r\n     * @param password\r\n     * @param name\r\n     * @returns Observable\r\n     */\n\n\n    signup(email, password, name, stayLoggedIn = false) {\n      this.keepAlive = stayLoggedIn;\n      const signUp = this.fAuth.createUserWithEmailAndPassword(email, password).then(result => {\n        // get the sentences template to copy for this user\n        const getTemplate = this.firestore.collection('sentences').doc('template'); // get the users id token\n\n        const getIdTokenResult = result.user.getIdTokenResult(true); // sets the user in the users database.\n\n        const setUser = this.firestore.collection('users').doc(result.user.uid).set({\n          name: name,\n          email: email\n        });\n        return Promise.all([result, getIdTokenResult, getTemplate.ref.get(), setUser]);\n      }).then(([userCreation, token, sentencesTemplate, setUser]) => {\n        const newUserEstablishmentProfile = {\n          id: \"freeagent\",\n          name: \"Free Agent\"\n        }; // when successful then authenticate\n\n        const authenticate = this.handleAuthentication(email, userCreation.user.uid, name, newUserEstablishmentProfile, false, false, false, 'password', false, token.token); // set the sentences template with the users userid - this will be their own copy of the database.\n\n        this.firestore.collection('sentences').doc(userCreation.user.uid).set(sentencesTemplate.data()).then(() => {\n          // set the data into local storage to make it quicker ot retrieve next time...\n          let sentenceData = [];\n          sentenceData[0] = sentencesTemplate.data();\n          localStorage.setItem('sentences-data', JSON.stringify(sentenceData)); // and authenticate\n\n          authenticate;\n        }, error => {\n          console.log(`There was an error in the creation of a new sentences template: ${error.message}`);\n          authenticate;\n        });\n      }, error => {\n        console.log(`Some part of the user creation process failed: ${error.message}`);\n      });\n      return from(signUp);\n    }\n\n    login2(email, password, stayLoggedIn = false) {\n      return from(this.fAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n        return this.login3(email, password, true);\n      }));\n    }\n    /**\r\n     * Logs a user in.\r\n     * @param email\r\n     * @param password\r\n     * @returns Observable\r\n     */\n\n\n    login3(email, password, stayLoggedIn = false) {\n      this.keepAlive = stayLoggedIn;\n      const signIn = this.fAuth.signInWithEmailAndPassword(email, password).then(result => {\n        const userDocRef = this.firestore.collection('users').doc(result.user.uid); // promise all rejects if one fails or continues if all succeed\n\n        return Promise.all([Promise.resolve(result), result.user.getIdTokenResult(), userDocRef.ref.get()]);\n      }).then(([user, tokenData, userDataSnapshot]) => {\n        const establishment = userDataSnapshot.get('establishment') ? userDataSnapshot.get('establishment') : {\n          id: \"freeagent\",\n          name: \"Free Agent\"\n        };\n        const admin = tokenData.claims.admin ? tokenData.claims.admin : false;\n        const manager = tokenData.claims.manager ? tokenData.claims.manager : false;\n        const member = tokenData.claims.member ? tokenData.claims.member : false;\n        const autoUpdate = userDataSnapshot.get('autoUpdateDb') ? userDataSnapshot.get('autoUpdateDb') : false;\n        this.handleAuthentication(user.user.email, user.user.uid, userDataSnapshot.get('name'), establishment, admin, manager, member, user.additionalUserInfo.providerId, autoUpdate, tokenData.token);\n      });\n      return from(signIn);\n    }\n\n    GoogleAuth(stayLoggedIn = true) {\n      this.keepAlive = stayLoggedIn;\n      const googleAuth = new firebase.auth.GoogleAuthProvider();\n      return this.AuthLogin(googleAuth);\n    }\n    /**\r\n     * Login OR SIGN UP via an external provider\r\n     * @param provider\r\n     * @returns\r\n     */\n\n\n    AuthLogin(provider) {\n      return this.fAuth.signInWithPopup(provider).then(result => {\n        const userDocRef = this.firestore.collection('users').doc(result.user.uid);\n        console.log(result); // promise all rejects if one fails or continues if all succeed\n\n        return Promise.all([Promise.resolve(result), result.user.getIdTokenResult(), userDocRef.ref.get()]);\n      }).then(([user, tokenData, userDataSnapshot]) => {\n        const establishment = userDataSnapshot.get('establishment') ? userDataSnapshot.get('establishment') : {\n          id: \"freeagent\",\n          name: \"Free Agent\"\n        };\n        const admin = tokenData.claims.admin ? tokenData.claims.admin : false;\n        const manager = tokenData.claims.manager ? tokenData.claims.manager : false;\n        const member = tokenData.claims.member ? tokenData.claims.member : false;\n        const autoUpdate = userDataSnapshot.get('autoUpdateDb') ? userDataSnapshot.get('autoUpdateDb') : false;\n        this.handleAuthentication(user.user.email, user.user.uid, user.user.displayName, establishment, admin, manager, member, user.additionalUserInfo.providerId, autoUpdate, tokenData.token);\n      });\n    }\n\n    logout() {\n      return from(this.fAuth.signOut().then(() => {\n        // localStorage.removeItem('userData');\n        // localStorage.removeItem('sentences-data');\n        localStorage.clear();\n        this.user.next(null);\n        this.router.navigate(['/']);\n      }).catch(error => {\n        console.log(`An error occurred during logout: ${error.message}`);\n      }));\n    }\n    /**\r\n     * Used to facilitate relogin after refresh.\r\n     * @returns\r\n     */\n\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData.name, userData.establishment, userData.admin, userData.manager, userData.member, userData.provider, userData.autoUpdateDb, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser); // set the auto logout feature\n\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    autoLogout(expirationDuration) {\n      this.logoutTimer = setInterval(() => {\n        //  if(this.keepAlive) {\n        // if keepalive is true then refresh the token and the userdata...\n        firebase.auth().currentUser.getIdToken(true).then(result => {\n          const newUser = new User(this.user.value.email, this.user.value.id, this.user.value.name, this.user.value.establishment, this.user.value.admin, this.user.value.manager, this.user.value.member, this.user.value.provider, this.user.value.autoUpdateDb, result, new Date(new Date().getTime() + 3600 * 1000));\n          this.user.next(newUser);\n        }); //  } else {\n        //      clearInterval(this.logoutTimer);\n        //      this.logout();\n        //  }\n      }, 3600000);\n    }\n\n    manualTokenRefresh() {\n      console.log(`Called...`); //  firebase.auth().currentUser.getIdToken(true).then((result: string) => {\n\n      firebase.auth().currentUser.getIdToken(true).then(result => {\n        console.log(this.user.value);\n        console.log(result.substring(0, 20));\n      }, error => {\n        console.log(error);\n      });\n    }\n    /**\r\n     * Handles the authentication of the user and sets the user data\r\n     * @param email\r\n     * @param userId\r\n     * @param token\r\n     * @param expiresIn\r\n     */\n\n\n    handleAuthentication(email, userId, name, establishment, admin, manager, member, provider, autoUpdateDb, token) {\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      const user = new User(email, userId, name, {\n        id: establishment.id,\n        name: establishment.name\n      }, admin, manager, member, provider, autoUpdateDb, token, expirationDate);\n      this.autoLogout(3600 * 1000);\n      this.user.next(user); // // get user data\n      // this.db.getUsers();\n      // persistence using local storage\n\n      localStorage.setItem('userData', JSON.stringify(user));\n      this.router.navigate(['/dashboard']);\n    }\n\n    setKeepAlive(value) {\n      this.keepAlive = value;\n    }\n    /**\r\n       * handles any errors output from the login or signup functions\r\n       * @param errorResponse\r\n       * @returns error message\r\n       */\n\n\n    handleError(errorResponse) {\n      let errorMessage = 'An Unknown Error Occurred!';\n\n      if (!errorResponse.code) {\n        return errorMessage;\n      } else {\n        switch (errorResponse.code) {\n          case 'auth/weak-password':\n            errorMessage = \"The password you entered is too weak. Please make a stronger password by making it longer, using a mixture of capital and small letters, numbers and/or symbols.\";\n            break;\n\n          case 'auth/email-already-exists':\n            errorMessage = \"This email address exists already.\";\n            break;\n\n          case 'auth/too-many-requests':\n            errorMessage = \"You have attempted to signup too many times, please try again later.\";\n            break;\n\n          case 'auth/user-not-found':\n          case 'auth/invalid-password':\n            errorMessage = \"Either the username or password entered is invalid\";\n            break;\n\n          case 'auth/user-disabled':\n            errorMessage = \"Your account has been locked. Please contact your school administrator.\";\n            break;\n\n          default:\n            errorMessage = \"An error occurred, please try again later.\";\n            break;\n        }\n      }\n\n      return errorMessage;\n    }\n    /**\r\n     * Checks if the password meets the bare minimum standards...\r\n     * @returns\r\n     */\n\n\n    testPassword(pass) {\n      return this.acceptable.test(pass) ? true : false;\n    }\n\n    getPasswordStrength(password) {\n      if (this.strong.test(password)) {\n        return 1;\n      } else if (this.medium.test(password) || this.long.test(password)) {\n        return 2;\n      } else return 3;\n    }\n\n    checkPasswordMatch(newPass, newRepeat) {\n      return newPass === newRepeat ? true : false;\n    }\n    /**\r\n     * This will be how any password reset happens, as angularfire2 doesnt support direct changing of user credentials.\r\n     * @param emailAddress\r\n     * @returns\r\n     */\n\n\n    sendPasswordResetEmail(emailAddress) {\n      return from(this.fAuth.sendPasswordResetEmail(emailAddress).then(res => {\n        return true;\n      }, error => {\n        console.log(`Password reset not sent: ${error}`);\n        return false;\n      }));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}