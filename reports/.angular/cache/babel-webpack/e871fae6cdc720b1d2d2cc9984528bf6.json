{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport let GroupsService = /*#__PURE__*/(() => {\n  class GroupsService {\n    constructor(db) {\n      this.db = db;\n      this.groups = [];\n    }\n    /**\r\n    * Get the best version of the groups and return it\r\n    * (either from local storage or the database...)\r\n    * @returns\r\n    */\n\n\n    getGroups(forcedFromDatabase = false) {\n      this.groups = []; // check if there is an instance of the groups database in localstorage...\n\n      if (localStorage.getItem('groups-data') !== null && forcedFromDatabase === false) {\n        // retrieve the data from local storage and parse it into the templates data...\n        this.groups = JSON.parse(localStorage.getItem('groups-data')); // set the data on the display\n\n        return of(this.groups).pipe(take(1), tap(returnData => {\n          // return the data array...\n          return returnData;\n        }));\n      } else {\n        // need to retrive the data from the database...\n        return this.db.getGroups().pipe(take(1), map(returnData => {\n          // Iterate through the groups to see up the group data.\n          returnData.forEach(grp => {\n            let newData = grp.data();\n            let orderedStudents = [];\n            newData['id'] = grp.id; // rearrange the student data to have the same order of keys as the newData.keys array\n\n            newData.students.forEach(student => {\n              let newStudent = {\n                id: student.id,\n                data: {}\n              }; // arrange the keys by the keys array\n\n              newData.keys.forEach(key => {\n                if (student.data[key]) {\n                  newStudent.data[key] = student.data[key];\n                } else {\n                  newStudent.data[key] = \"\";\n                }\n              }); // add the new student to the array\n\n              orderedStudents.push(newStudent);\n            }); // push to the group data\n\n            newData.students = orderedStudents;\n            this.groups.push(newData);\n          }); // set the data into local storage to make it quicker ot retrieve next time...\n\n          localStorage.setItem('groups-data', JSON.stringify(this.groups));\n          return this.groups;\n        }));\n      }\n    }\n    /**\r\n     * Get an individual group\r\n     *\r\n     * @param id\r\n     * @returns\r\n     */\n\n\n    getGroup(id) {\n      return this.getGroups().pipe(take(1), map(groups => {\n        this.groups = groups; // and then find the required file...\n\n        let groupIndex = groups.findIndex(grp => grp.id === id);\n        return this.groups[groupIndex];\n      }));\n    }\n    /**\r\n     * Adds a new group to the database.\r\n     * @param newGroup\r\n     */\n\n\n    addGroup(newGroup) {\n      // call the database...\n      return this.db.createGroup(newGroup).pipe(take(1), tap(res => {\n        // add the id of the document to the group \n        newGroup.id = res.id; // add the new group to the groups array..\n\n        this.groups.push(newGroup); // update the local storage\n\n        this.updateLocalStorage(this.groups);\n      }, error => {\n        console.log(`Error: ${error}`);\n      }));\n    }\n    /**\r\n     * updates the data in a group...\r\n     * @param group\r\n     * @param id\r\n     */\n\n\n    updateGroup(group, id) {\n      // call the db\n      return this.db.modifyGroup(group, id).pipe(take(1), tap(res => {\n        // success...\n        let index = this.groups.findIndex(grp => grp.id === id); // if found then update local storage\n\n        if (index !== -1) {\n          this.groups[index] = Object.assign({\n            id: id\n          }, group);\n          this.updateLocalStorage(this.groups);\n        }\n      }, error => {\n        console.log(`Error: ${error}`);\n      }));\n    }\n    /**\r\n     * removes a group from the database...\r\n     * @param id\r\n     */\n\n\n    deleteGroup(id) {\n      // call the db\n      return this.db.deleteGroup(id).pipe(take(1), tap(res => {\n        // success\n        let index = this.groups.findIndex(grp => grp.id === id); // if found then update local storage\n\n        if (index !== -1) {\n          this.groups.splice(index, 1);\n          this.updateLocalStorage(this.groups);\n        }\n      }, error => {\n        console.log(`Error: ${error}`);\n      }));\n    }\n    /**\r\n     * Updates the storage on the local machine - used to speed up the whole application\r\n     * but essentially mirrors the database.\r\n     * @param templates\r\n     */\n\n\n    updateLocalStorage(groups) {\n      localStorage.setItem('groups-data', JSON.stringify(groups));\n    }\n    /**\r\n     * Update the database with new information.\r\n     * @param template\r\n     * @param id\r\n     * @returns\r\n     */\n\n\n    updateDatabase(group, id) {\n      // update the database.\n      return this.db.modifyGroup(group, id).pipe(take(1), tap(result => {\n        // success...\n        return true;\n      }, error => {\n        console.log(`Error updating database: ${error}`);\n        return false;\n      }));\n    }\n    /**\r\n     * Generate a new random ID...\r\n     * DONE\r\n     * @returns\r\n     */\n\n\n    generateRandomId() {\n      let newId = \"\"; // get the characterset, length of character set and intended length of random ID.\n\n      const characterset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      const numberOfCharacters = characterset.length;\n      const length = 5; // 5 seems good, 62^5\n      // generate a random number\n\n      for (let i = 0; i < length; i++) {\n        newId += characterset.charAt(Math.floor(Math.random() * numberOfCharacters));\n      }\n\n      return newId;\n    }\n\n  }\n\n  GroupsService.ɵfac = function GroupsService_Factory(t) {\n    return new (t || GroupsService)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  GroupsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupsService,\n    factory: GroupsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GroupsService;\n})();","map":null,"metadata":{},"sourceType":"module"}